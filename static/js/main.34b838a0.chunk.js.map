{"version":3,"sources":["components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","getWeather","className","type","name","placeholder","value","Weather","tempreature","city","country","humidity","description","error","api_key","App","state","e","a","preventDefault","target","elements","fetch","api","json","data","setState","main","temp","sys","weather","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"+PAaeA,G,MAXF,SAACC,GACN,OACI,0BAAMC,SAAUD,EAAME,YAClB,2BAAOC,UAAU,QAAQC,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC7D,2BAAOH,UAAU,QAAQC,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAChE,2BAAOF,KAAK,SAASG,MAAM,mBCqB5BC,EA1BC,SAACR,GACb,OACG,4BAEKA,EAAMS,aAAe,4BAAI,iDAA8B,kCAAQT,EAAMS,YAAd,MAGvDT,EAAMU,MAAQ,4BAAI,0CAAuB,8BAAOV,EAAMU,KAAb,MAGzCV,EAAMW,SAAW,4BAAI,6CAA0B,8BAAOX,EAAMW,QAAb,MAG/CX,EAAMY,UAAY,4BAAI,8CAA2B,8BAAOZ,EAAMY,SAAb,MAGjDZ,EAAMa,aAAe,4BAAI,iDAA8B,8BAAOb,EAAMa,YAAb,MAGvDb,EAAMc,OAAS,4BAAI,8BAAOd,EAAMc,MAAb,QCfzBC,EAAU,mCA8DDC,E,4MA3DXC,MAAQ,CACJR,YAAY,GACZC,KAAM,GACNC,QAAQ,GACRC,SAAU,GACVC,YAAa,GACbC,MAAO,I,EAGXZ,W,uCAAa,WAAOgB,GAAP,qBAAAC,EAAA,6DACTD,EAAEE,iBACIV,EAAOQ,EAAEG,OAAOC,SAASZ,KAAKH,MAC9BI,EAAUO,EAAEG,OAAOC,SAASX,QAAQJ,MAHjC,SAKSgB,MAAM,oDAAD,OAAqDb,EAArD,YAA6DC,EAA7D,kBAA8EI,IAL5F,cAKHS,EALG,gBAMUA,EAAIC,OANd,OAMHC,EANG,OAQNhB,GAAQC,EACP,EAAKgB,SAAS,CACVlB,YAAaiB,EAAKE,KAAKC,KACvBnB,KAAMgB,EAAKrB,KACXM,QAASe,EAAKI,IAAInB,QAClBC,SAAUc,EAAKE,KAAKhB,SACpBC,YAAaa,EAAKK,QAAQ,GAAGlB,YAC7BC,MAAO,KAGX,EAAKa,SAAS,CACVlB,YAAY,GACZC,KAAM,GACNC,QAAQ,GACRC,SAAU,GACVC,YAAa,GACbC,MAAO,kCAxBN,4C,6GA8BT,OACI,yBAAKX,UAAU,OACd,6CACD,yBAAKA,UAAY,WAChB,kBAAC,EAAD,CAAMD,WAAc8B,KAAK9B,aACzB,kBAAC,EAAD,CACDO,YAAauB,KAAKf,MAAMR,YACxBC,KAAOsB,KAAKf,MAAMP,KAClBC,QAAUqB,KAAKf,MAAMN,QACrBC,SAAWoB,KAAKf,MAAML,SACtBC,YAAcmB,KAAKf,MAAMJ,YACzBC,MAAQkB,KAAKf,MAAMH,c,GAnDbmB,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,a","file":"static/js/main.34b838a0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = (props) => {\r\n        return (\r\n            <form onSubmit={props.getWeather}>\r\n                <input className=\"input\" type=\"text\" name=\"city\" placeholder=\"City...\" />\r\n                <input className=\"input\" type=\"text\" name=\"country\" placeholder=\"Country...\" />\r\n                <input type=\"submit\" value=\"Get Weather\" />\r\n            </form>\r\n        );\r\n\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nconst Weather = (props) => {\r\n    return (\r\n       <ul>\r\n        {\r\n            props.tempreature && <li><strong>Tempreature: </strong><span> {props.tempreature} </span></li>\r\n        }\r\n        {\r\n            props.city && <li><strong>City: </strong><span>{props.city} </span></li>\r\n        }\r\n        {\r\n            props.country && <li><strong>Country: </strong><span>{props.country} </span></li>\r\n        }\r\n        {\r\n            props.humidity && <li><strong>Humidity: </strong><span>{props.humidity} </span></li>\r\n        }\r\n        {\r\n            props.description && <li><strong>Description: </strong><span>{props.description} </span></li>\r\n        }\r\n        {\r\n            props.error && <li><span>{props.error} </span></li>\r\n        }\r\n       </ul>\r\n);\r\n\r\n}\r\n\r\nexport default Weather;","import React, {Component} from 'react';\nimport './App.css';\n\nimport Form from './components/Form';\nimport Weather from './components/Weather';\n\nconst api_key = \"71d3a0f8205c7acf088e4a5f1703de5f\";\n\nclass App extends Component {\n    state = {\n        tempreature:'',\n        city: '',\n        country:'',\n        humidity: '',\n        description: '',\n        error: ''\n    }\n\n    getWeather = async (e) => {\n        e.preventDefault();\n        const city = e.target.elements.city.value;\n        const country = e.target.elements.country.value;\n\n        const api = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${api_key}`);\n        const data = await api.json();\n        //console.log(data);\n        if(city && country){\n            this.setState({\n                tempreature: data.main.temp,\n                city: data.name,\n                country: data.sys.country,\n                humidity: data.main.humidity,\n                description: data.weather[0].description,\n                error: ''\n            });\n        }else{\n            this.setState({\n                tempreature:'',\n                city: '',\n                country:'',\n                humidity: '',\n                description: '',\n                error: 'Please Enter City and Country'\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"app\">\n             <h1>React Weather</h1>\n            <div className = \"weather\">\n             <Form getWeather = {this.getWeather}/>\n             <Weather\n            tempreature={this.state.tempreature}\n            city= {this.state.city}\n            country= {this.state.country}\n            humidity= {this.state.humidity}\n            description= {this.state.description}\n            error= {this.state.error}\n                />\n           </div>\n        </div>\n    )\n        ;\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}